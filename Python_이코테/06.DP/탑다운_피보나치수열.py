##### 다이나믹프로그래밍 ######
# 1. 최적 부분 구조 : 큰 문제를 작은 문제로 나눌 수 있다
# 2. 중복되는 부분 문제 : 동일한 작은 문제를 반복적으로 해결
# 상향식(보텀업, DP테이블)과 하향식(탑다운, 메모이제이션) 2가지 사용가능

###### 하향식(DP)
# 반복문 사용
# 보텀업 방식이 일반적
# 결과 저장용 리스트는 DP테이블이라고 부름

###### 탑다운(메모이제이션)
# 한 번 계산한 결과를 메모리 공간에 메모하는 기법
## 같은 문제를 다시 호출하면 메모했던 결과 그대로 가져옴
## 값을 기록해 놓는다는 점에서 캐싱이라고도 함
# 재귀함수 사용
# 이전에 계산된 결과를 일시적으로 기록해 놓는 넓은 개념 => 꼭 다이나믹 프로그래밍으로 국한되지 않음

# 한 번 계산된 결과를 메모이제이션하기 위한 리스트 초기화
d = [0] * 100

# 피보나치 수열을 재귀함수로 구현(탑다운 다이나믹 프로그래밍)
# f(6) f(5) f(4) f(3) f(2) f(1) f(2) f(3) f(4) 8
# 시간복잡도 O(2^N) => O(N)
def fibo(x):
    print('f(' + str(x) + ')', end=' ')
    if x == 1 or x == 2:
        return 1
    # 이미 계산한 적 있는 문제면 그대로 반환
    if d[x] != 0:
        return d[x]
    # 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환
    d[x] = fibo(x-1) + fibo(x-2)
    return d[x]


print(fibo(6))